let SessionLoad = 1
if &cp | set nocp | endif
let s:cpo_save=&cpo
set cpo&vim
inoremap <silent> <S-Tab> =BackwardsSnippet()
inoremap <silent> <SNR>68_yrrecord =YRRecord3()
imap <F2> :update
map  h
snoremap <silent> 	 i<Right>=TriggerSnippet()
map <NL> j
map  k
map  l
nnoremap <silent>  :YRReplace '1', p
nnoremap <silent>  :YRReplace '-1', P
snoremap  b<BS>
map   
vnoremap <silent> # :call VisualSearch('b')
vnoremap $e `>a"`<i"
vnoremap $q `>a'`<i'
vnoremap $$ `>a"`<i"
vnoremap $3 `>a}`<i{
vnoremap $2 `>a]`<i[
vnoremap $1 `>a)`<i(
snoremap % b<BS>%
snoremap ' b<BS>'
vnoremap <silent> * :call VisualSearch('f')
nnoremap ,<F5> :call Run(&ft)
map <silent> ,cc <Plug>CRV_CRefVimInvoke
map <silent> ,cw <Plug>CRV_CRefVimAsk
nmap <silent> ,cr <Plug>CRV_CRefVimNormal
vmap <silent> ,cr <Plug>CRV_CRefVimVisual
nmap ,caL <Plug>CalendarH
nmap ,cal <Plug>CalendarV
nmap ,ihn :IHN
nmap ,is :IHS:A
nmap ,ih :IHS
map ,<F9> :VoomToggle
map ,s :tj =expand("<cword>")
map ,4 :cclose
map ,3 :cnext
map ,2 :cprev
map ,1 :botright copen 20
map ,<F3> :Rgrep -I
map ,, :BufExplorerHorizontalSplit
map ,j :FufJumpList
map ,d :FufDir
map ,b :FufBuffer
map ,f :FufFile
map ,q :e ~/buffer
map ,s? z=
map ,sa zg
map ,sp [s
map ,sn ]s
map ,ss :setlocal spell!
map ,u :TMiniBufExplorer:TMiniBufExplorer
map ,p :cp
map ,cd :cd %:p:h
map ,tm :tabmove 
map ,tc :tabclose
vmap ,te :tabedit 
omap ,te :tabedit 
map ,tn :tabnew %
map ,ba :1,300 bd!
map ,bd :Bclose
map <silent> , :noh
map ,g :vimgrep // **/*.<Left><Left><Left><Left><Left><Left><Left>
map ,t8 :setlocal shiftwidth=4
map ,t4 :setlocal shiftwidth=4
map ,t2 :setlocal shiftwidth=2
map ,e :e! ~/.vim_runtime/vimrc
nmap ,w :w!
nmap 0 ^
vmap 0 ^
nmap @ :YRMapsMacro
cmap Â½ $
imap Â½ $
nmap F :CtrlP
vmap F :CtrlP
xnoremap <silent> P :YRPaste 'P', 'v'
nnoremap <silent> P :YRPaste 'P'
xmap S <Plug>VSurround
snoremap U b<BS>U
snoremap \ b<BS>\
snoremap ^ b<BS>^
snoremap ` b<BS>`
nmap cS <Plug>CSurround
nmap cs <Plug>Csurround
xnoremap <silent> d :YRDeleteRange 'v'
nmap ds <Plug>Dsurround
nmap f :CtrlP
vmap f :CtrlP
nmap gx <Plug>NetrwBrowseX
nnoremap <silent> gp :YRPaste 'gp'
nnoremap <silent> gP :YRPaste 'gP'
xmap gS <Plug>VgSurround
vnoremap <silent> gv :call VisualSearch('gv')
xnoremap <silent> p :YRPaste 'p', 'v'
nnoremap <silent> p :YRPaste 'p'
map s :vertical ptj =expand("<cword>")
xnoremap <silent> x :YRDeleteRange 'v'
xnoremap <silent> y :YRYankRange 'v'
nmap ySS <Plug>YSsurround
nmap ySs <Plug>YSsurround
nmap yss <Plug>Yssurround
nmap yS <Plug>YSurround
nmap ys <Plug>Ysurround
snoremap <Left> bi
snoremap <Right> a
snoremap <BS> b<BS>
snoremap <silent> <S-Tab> i<Right>=BackwardsSnippet()
nnoremap <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)
nnoremap <silent> <SNR>68_yrrecord :call YRRecord3()
nnoremap <silent> <Plug>SurroundRepeat .
nnoremap <silent> <Plug>CalendarH :cal Calendar(1)
nnoremap <silent> <Plug>CalendarV :cal Calendar(0)
map <F12><F12> :NERDTreeToggle
map <F12> :NERDTreeFind
map <F9><F9> :Me
map <F9> :Mer
nmap <F6><F6><F6> :SrcExplToggle
map <F8> :tn
map <F7> :tp
map <F6><F6> :tj =expand("<cword>")
map <F6> :tj 
map <F5><F5> :Tlist
map <F5> :TagbarToggle
map <F3><F3><F3> :Grep -I
map <F3><F3> :GrepBuffer -I
noremap <F3> :vimgrep /=expand("<cword>")/j %:p | :botright copen 20
map <F4> :Bclose
nmap <F2> :update
map <C-Left> :bp
map <C-Right> :bn
cnoremap  <Home>
cnoremap  <End>
imap S <Plug>ISurround
imap s <Plug>Isurround
inoremap <silent> 	 =TriggerSnippet()
cnoremap  
cnoremap  <Down>
cnoremap  <Up>
inoremap <silent> 	 =ShowAvailableSnips()
imap  <Plug>Isurround
inoremap $e ""i
inoremap $q ''i
inoremap $4 {o}O
inoremap $3 {}i
inoremap $2 []i
inoremap $1 ()i
cnoremap $q eDeleteTillSlash()
cnoremap $c e eCurrentFileDir("e")
cnoremap $j e ./
cnoremap $d e ~/Desktop/
cnoremap $h e ~/
imap ,ihn :IHN
imap ,is :IHS:A
imap ,ih :IHS
vmap Â½ $
nmap Â½ $
omap Â½ $
map Ã¦ :CtrlPClearCache
vmap Ã« :m'<-2`>my`<mzgv`yo`z
vmap Ãª :m'>+`<my`>mzgv`yo`z
nmap Ã« mz:m-2`z
nmap Ãª mz:m+`z
cabbr rubyx call Run('ruby')
cabbr perlx call Run('perl')
cabbr pyx call Run('python')
cabbr sx call Run(&ft)
iabbr xdate =strftime("%d/%m/%y %H:%M:%S")
let &cpo=s:cpo_save
unlet s:cpo_save
set autoindent
set autoread
set background=dark
set backspace=eol,start,indent
set cmdheight=2
set expandtab
set fileencodings=utf8,gbk
set fileformats=unix,dos,mac
set grepprg=/bin/grep\ -nH
set helplang=en
set hidden
set history=300
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set matchtime=2
set modelines=0
set pastetoggle=,<F12>
set ruler
set scrolloff=7
set shiftwidth=4
set showmatch
set showtabline=2
set smartindent
set smarttab
set splitright
set statusline=\ %F%m%r%h\ %w\ \ CWD:\ %r%{CurDir()}%h\ \ \ Line:\ %l/%L:%c
set noswapfile
set switchbuf=usetab
set tabstop=4
set textwidth=500
set updatetime=500
set whichwrap=b,s,<,>,h,l
set wildmenu
set window=0
set nowritebackup
let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0
let v:this_session=expand("<sfile>:p")
silent only
cd ~/workspace/kproject/GitChatRoom.git
if expand('%') == '' && !&modified && line('$') <= 1 && getline(1) == ''
  let s:wipebuf = bufnr('%')
endif
set shortmess=aoO
badd +1 README.md
args README.md
edit README.md
set splitbelow splitright
set nosplitbelow
wincmd t
set winheight=1 winwidth=1
argglobal
nnoremap <buffer> <silent>   :call markdown#SwitchStatus()
nnoremap <buffer> <silent> ,ft :call markdown#FormatTable()
vnoremap <buffer> ,e :MarkdownEditBlock
nnoremap <buffer> ,e :MarkdownEditBlock
inoremap <buffer> <silent> | |:call markdown#FormatTable()a
iabbr <buffer> >> Â»
iabbr <buffer> << Â«
let s:cpo_save=&cpo
set cpo&vim
iabbr <buffer> ... â€¦
iabbr <buffer> :-( :disappointed:
iabbr <buffer> :-D :laughing:
iabbr <buffer> :-) :smile:
let &cpo=s:cpo_save
unlet s:cpo_save
setlocal autoindent
setlocal nobinary
setlocal bufhidden=
setlocal buflisted
setlocal buftype=
setlocal nocindent
setlocal cinkeys=0{,0},0),:,0#,!^F,o,O,e
setlocal cinoptions=
setlocal cinwords=if,else,while,do,for,switch
setlocal colorcolumn=
setlocal comments=b:*,b:-,b:+,n:>
setlocal commentstring=>\ %s
setlocal complete=.,w,b,u,t,i,k
setlocal completefunc=
setlocal nocopyindent
setlocal cryptmethod=
setlocal nocursorbind
setlocal nocursorcolumn
setlocal nocursorline
setlocal define=
setlocal dictionary='/Users/wangkevin/.vim'/dict/emoticons.dict
setlocal nodiff
setlocal equalprg=
setlocal errorformat=
setlocal expandtab
if &filetype != 'markdown'
setlocal filetype=markdown
endif
setlocal foldcolumn=0
setlocal foldenable
setlocal foldexpr=0
setlocal foldignore=#
setlocal foldlevel=4
setlocal foldmarker={{{,}}}
setlocal foldmethod=manual
setlocal foldminlines=1
setlocal foldnestmax=20
setlocal foldtext=foldtext()
setlocal formatexpr=
setlocal formatoptions=tcrqon
setlocal formatlistpat=
setlocal grepprg=
setlocal iminsert=0
setlocal imsearch=0
setlocal include=
setlocal includeexpr=
setlocal indentexpr=
setlocal indentkeys=0{,0},:,0#,!^F,o,O,e
setlocal noinfercase
setlocal iskeyword=@,48-57,_,192-255,:,+,-
setlocal keywordprg=
set linebreak
setlocal linebreak
setlocal nolisp
setlocal nolist
setlocal makeprg=
setlocal matchpairs=(:),{:},[:]
setlocal modeline
setlocal modifiable
setlocal nrformats=octal,hex
set number
setlocal number
setlocal numberwidth=4
setlocal omnifunc=
setlocal path=
setlocal nopreserveindent
setlocal nopreviewwindow
setlocal quoteescape=\\
setlocal noreadonly
setlocal norelativenumber
setlocal noscrollbind
setlocal shiftwidth=4
setlocal noshortname
setlocal smartindent
setlocal softtabstop=0
setlocal nospell
setlocal spellcapcheck=[.?!]\\_[\\])'\"\	\ ]\\+
setlocal spellfile=
setlocal spelllang=en
setlocal statusline=
setlocal suffixesadd=
setlocal noswapfile
setlocal synmaxcol=3000
if &syntax != 'markdown'
setlocal syntax=markdown
endif
setlocal tabstop=4
setlocal tags=
setlocal textwidth=0
setlocal thesaurus=
setlocal noundofile
setlocal nowinfixheight
setlocal nowinfixwidth
set nowrap
setlocal nowrap
setlocal wrapmargin=0
silent! normal! zE
let s:l = 100 - ((13 * winheight(0) + 19) / 39)
if s:l < 1 | let s:l = 1 | endif
exe s:l
normal! zt
100
normal! 0
tabnext 1
if exists('s:wipebuf')
  silent exe 'bwipe ' . s:wipebuf
endif
unlet! s:wipebuf
set winheight=1 winwidth=20 shortmess=filnxtToO
let s:sx = expand("<sfile>:p:r")."x.vim"
if file_readable(s:sx)
  exe "source " . fnameescape(s:sx)
endif
let &so = s:so_save | let &siso = s:siso_save
doautoall SessionLoadPost
unlet SessionLoad
" vim: set ft=vim :
